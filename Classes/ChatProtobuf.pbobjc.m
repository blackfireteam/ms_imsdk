// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatProtobuf.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ChatProtobuf.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ChatItem);
GPBObjCClassDeclaration(ChatR);
GPBObjCClassDeclaration(GetProfile);
GPBObjCClassDeclaration(GroupChatR);
GPBObjCClassDeclaration(GroupMember);
GPBObjCClassDeclaration(GroupTipEvent);
GPBObjCClassDeclaration(Profile);

#pragma mark - ChatProtobufRoot

@implementation ChatProtobufRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChatProtobufRoot_FileDescriptor

static GPBFileDescriptor *ChatProtobufRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Ping

@implementation Ping

@dynamic type;

typedef struct Ping__storage_ {
  uint32_t _has_storage_[1];
  int64_t type;
} Ping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = Ping_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ping__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ping class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImLogin

@implementation ImLogin

@dynamic sign;
@dynamic token;
@dynamic ct;
@dynamic subApp;
@dynamic pushChannel;
@dynamic pushToken;
@dynamic lastToken;

typedef struct ImLogin__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *pushToken;
  NSString *lastToken;
  int64_t sign;
  int64_t ct;
  int64_t subApp;
  int64_t pushChannel;
} ImLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImLogin__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImLogin__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ct",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_Ct,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImLogin__storage_, ct),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subApp",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_SubApp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImLogin__storage_, subApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_PushChannel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ImLogin__storage_, pushChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushToken",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_PushToken,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ImLogin__storage_, pushToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastToken",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogin_FieldNumber_LastToken,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ImLogin__storage_, lastToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImLogin class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImLogin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImLogout

@implementation ImLogout

@dynamic sign;

typedef struct ImLogout__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} ImLogout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ImLogout_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImLogout__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImLogout class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImLogout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Result

@implementation Result

@dynamic sign;
@dynamic code;
@dynamic msg;
@dynamic nowTime;
@dynamic uid;

typedef struct Result__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  int64_t sign;
  int64_t code;
  int64_t nowTime;
  int64_t uid;
} Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Result__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Result__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Result__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nowTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_NowTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Result__storage_, nowTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Result_FieldNumber_Uid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Result__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Result class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Result__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatS

@implementation ChatS

@dynamic sign;
@dynamic type;
@dynamic toUid;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;
@dynamic pushTitle;
@dynamic pushBody;
@dynamic pushSound;
@dynamic flash;

typedef struct ChatS__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  NSString *pushTitle;
  NSString *pushBody;
  NSString *pushSound;
  int64_t sign;
  int64_t type;
  int64_t toUid;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
} ChatS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatS__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatS__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatS__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatS__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Body,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatS__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Thumb,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatS__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Width,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatS__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Height,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatS__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Duration,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatS__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Lat,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatS__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Lng,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ChatS__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Zoom,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ChatS__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_PushTitle,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ChatS__storage_, pushTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushBody",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_PushBody,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ChatS__storage_, pushBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushSound",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_PushSound,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ChatS__storage_, pushSound),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flash",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatS_FieldNumber_Flash,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatS class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatS__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatSR

@implementation ChatSR

@dynamic sign;
@dynamic msgId;
@dynamic msgTime;

typedef struct ChatSR__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t msgId;
  int64_t msgTime;
} ChatSR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatSR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatSR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatSR_FieldNumber_MsgTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatSR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatSR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatSR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatR

@implementation ChatR

@dynamic sign;
@dynamic fromUid;
@dynamic toUid;
@dynamic msgId;
@dynamic msgTime;
@dynamic sput;
@dynamic type;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;
@dynamic pushTitle;
@dynamic pushBody;
@dynamic pushSound;
@dynamic flash;

typedef struct ChatR__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  NSString *pushTitle;
  NSString *pushBody;
  NSString *pushSound;
  int64_t sign;
  int64_t fromUid;
  int64_t toUid;
  int64_t msgId;
  int64_t msgTime;
  int64_t sput;
  int64_t type;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
} ChatR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_FromUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatR__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatR__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_MsgTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sput",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Sput,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatR__storage_, sput),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatR__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Title,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatR__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Body,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatR__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Thumb,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChatR__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Width,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ChatR__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Height,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ChatR__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Duration,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ChatR__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Lat,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ChatR__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Lng,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ChatR__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Zoom,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ChatR__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_PushTitle,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ChatR__storage_, pushTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushBody",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_PushBody,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ChatR__storage_, pushBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushSound",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_PushSound,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ChatR__storage_, pushSound),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flash",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatR_FieldNumber_Flash,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatRBatch

@implementation ChatRBatch

@dynamic sign;
@dynamic msgsArray, msgsArray_Count;

typedef struct ChatRBatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
  int64_t sign;
} ChatRBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatRBatch_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatRBatch__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatR),
        .number = ChatRBatch_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatRBatch__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatRBatch class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatRBatch__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHistory

@implementation GetHistory

@dynamic sign;
@dynamic toUid;
@dynamic msgEnd;
@dynamic msgStart;
@dynamic offset;

typedef struct GetHistory__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgEnd;
  int64_t msgStart;
  int64_t offset;
} GetHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHistory__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHistory__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_MsgEnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHistory__storage_, msgEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgStart",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_MsgStart,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHistory__storage_, msgStart),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHistory_FieldNumber_Offset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHistory__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHistory class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHistory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Revoke

@implementation Revoke

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct Revoke__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} Revoke__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Revoke__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Revoke__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = Revoke_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Revoke__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Revoke class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Revoke__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRead

@implementation MsgRead

@dynamic sign;
@dynamic toUid;
@dynamic msgId;

typedef struct MsgRead__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
  int64_t msgId;
} MsgRead__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRead__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRead__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRead_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRead__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MsgRead class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRead__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelChat

@implementation DelChat

@dynamic sign;
@dynamic toUid;

typedef struct DelChat__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t toUid;
} DelChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelChat__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = DelChat_FieldNumber_ToUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelChat__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelChat class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelChat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatList

@implementation GetChatList

@dynamic sign;
@dynamic updateTime;
@dynamic uid;

typedef struct GetChatList__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t updateTime;
  int64_t uid;
} GetChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatList__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatList__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatList_FieldNumber_Uid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatList__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatItem

@implementation ChatItem

@dynamic sign;
@dynamic uid;
@dynamic msgEnd;
@dynamic msgLastRead;
@dynamic showMsgId;
@dynamic showMsgType;
@dynamic showMsg;
@dynamic showMsgTime;
@dynamic unread;
@dynamic iBlockU;
@dynamic deleted;

typedef struct ChatItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *showMsg;
  int64_t sign;
  int64_t uid;
  int64_t msgEnd;
  int64_t msgLastRead;
  int64_t showMsgId;
  int64_t showMsgType;
  int64_t showMsgTime;
  int64_t unread;
} ChatItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatItem__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatItem__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgEnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgLastRead",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_MsgLastRead,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatItem__storage_, msgLastRead),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_ShowMsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatItem__storage_, showMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showMsgType",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_ShowMsgType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatItem__storage_, showMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_ShowMsg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatItem__storage_, showMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showMsgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_ShowMsgTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChatItem__storage_, showMsgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Unread,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChatItem__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iBlockU",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_IBlockU,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deleted",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItem_FieldNumber_Deleted,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatItem class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatItemUpdate

@implementation ChatItemUpdate

@dynamic sign;
@dynamic uid;
@dynamic event;
@dynamic updateTime;
@dynamic msgLastRead;
@dynamic unread;
@dynamic iBlockU;
@dynamic deleted;

typedef struct ChatItemUpdate__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t uid;
  int64_t event;
  int64_t updateTime;
  int64_t msgLastRead;
  int64_t unread;
} ChatItemUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "event",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_Event,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, event),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_UpdateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgLastRead",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_MsgLastRead,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, msgLastRead),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unread",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_Unread,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatItemUpdate__storage_, unread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iBlockU",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_IBlockU,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deleted",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatItemUpdate_FieldNumber_Deleted,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatItemUpdate class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatItemUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatList

@implementation ChatList

@dynamic sign;
@dynamic chatItemsArray, chatItemsArray_Count;
@dynamic updateTime;

typedef struct ChatList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatItemsArray;
  int64_t sign;
  int64_t updateTime;
} ChatList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatList_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatList__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chatItemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChatItem),
        .number = ChatList_FieldNumber_ChatItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatList__storage_, chatItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatList_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatList__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfile

@implementation GetProfile

@dynamic sign;
@dynamic uid;
@dynamic updateTime;

typedef struct GetProfile__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t uid;
  int64_t updateTime;
} GetProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfile__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProfile__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfile_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProfile__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfile class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfiles

@implementation GetProfiles

@dynamic sign;
@dynamic getProfilesArray, getProfilesArray_Count;

typedef struct GetProfiles__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *getProfilesArray;
  int64_t sign;
} GetProfiles__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProfiles_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfiles__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getProfilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GetProfile),
        .number = GetProfiles_FieldNumber_GetProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetProfiles__storage_, getProfilesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfiles class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfiles__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Profile

@implementation Profile

@dynamic sign;
@dynamic uid;
@dynamic updateTime;
@dynamic nickName;
@dynamic avatar;
@dynamic gender;
@dynamic custom;
@dynamic hidden;

typedef struct Profile__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  NSString *custom;
  int64_t sign;
  int64_t uid;
  int64_t updateTime;
  int64_t gender;
} Profile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Profile__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Profile__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Profile__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Profile__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Profile__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Gender,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Profile__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "custom",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Custom,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Profile__storage_, custom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.clazz = Nil,
        .number = Profile_FieldNumber_Hidden,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Profile class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Profile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileList

@implementation ProfileList

@dynamic profilesArray, profilesArray_Count;

typedef struct ProfileList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *profilesArray;
} ProfileList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Profile),
        .number = ProfileList_FieldNumber_ProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProfileList__storage_, profilesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileList class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProfileList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChat

@implementation GetChat

@dynamic sign;
@dynamic uid;

typedef struct GetChat__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t uid;
} GetChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChat_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChat__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChat_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChat__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChat class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdatePushToken

@implementation UpdatePushToken

@dynamic sign;
@dynamic pushChannel;
@dynamic pushToken;

typedef struct UpdatePushToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *pushToken;
  int64_t sign;
  int64_t pushChannel;
} UpdatePushToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdatePushToken_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdatePushToken__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdatePushToken_FieldNumber_PushChannel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdatePushToken__storage_, pushChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pushToken",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdatePushToken_FieldNumber_PushToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdatePushToken__storage_, pushToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdatePushToken class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdatePushToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCosKey

@implementation GetCosKey

@dynamic sign;

typedef struct GetCosKey__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} GetCosKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetCosKey_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCosKey__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCosKey class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCosKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CosKey

@implementation CosKey

@dynamic sign;
@dynamic token;
@dynamic id_p;
@dynamic key;
@dynamic bucket;
@dynamic region;
@dynamic startTime;
@dynamic expTime;
@dynamic path;
@dynamic pathDemo;

typedef struct CosKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *id_p;
  NSString *key;
  NSString *bucket;
  NSString *region;
  NSString *path;
  NSString *pathDemo;
  int64_t sign;
  int64_t startTime;
  int64_t expTime;
} CosKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CosKey__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CosKey__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CosKey__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Key,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CosKey__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bucket",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Bucket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CosKey__storage_, bucket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "region",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Region,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CosKey__storage_, region),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_StartTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CosKey__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expTime",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_ExpTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CosKey__storage_, expTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_Path,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CosKey__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pathDemo",
        .dataTypeSpecific.clazz = Nil,
        .number = CosKey_FieldNumber_PathDemo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CosKey__storage_, pathDemo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CosKey class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CosKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAgoraToken

@implementation GetAgoraToken

@dynamic sign;
@dynamic uid;
@dynamic channel;
@dynamic expType;

typedef struct GetAgoraToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *channel;
  int64_t sign;
  int64_t uid;
  int64_t expType;
} GetAgoraToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetAgoraToken_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAgoraToken__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GetAgoraToken_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAgoraToken__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = GetAgoraToken_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAgoraToken__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expType",
        .dataTypeSpecific.clazz = Nil,
        .number = GetAgoraToken_FieldNumber_ExpType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetAgoraToken__storage_, expType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAgoraToken class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAgoraToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AgoraToken

@implementation AgoraToken

@dynamic sign;
@dynamic appId;
@dynamic token;

typedef struct AgoraToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *token;
  int64_t sign;
} AgoraToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = AgoraToken_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AgoraToken__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = AgoraToken_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AgoraToken__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = AgoraToken_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AgoraToken__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AgoraToken class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AgoraToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JoinGroup

@implementation JoinGroup

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic lastMsgId;

typedef struct JoinGroup__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t lastMsgId;
} JoinGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinGroup_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JoinGroup__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinGroup_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JoinGroup__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinGroup_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JoinGroup__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinGroup_FieldNumber_LastMsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JoinGroup__storage_, lastMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JoinGroup class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JoinGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LeaveGroup

@implementation LeaveGroup

@dynamic sign;
@dynamic gtype;
@dynamic id_p;

typedef struct LeaveGroup__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
} LeaveGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaveGroup_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LeaveGroup__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaveGroup_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LeaveGroup__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaveGroup_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LeaveGroup__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LeaveGroup class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LeaveGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupMember

@implementation GroupMember

@dynamic uid;
@dynamic role;
@dynamic isMute;

typedef struct GroupMember__storage_ {
  uint32_t _has_storage_[1];
  int64_t uid;
  int64_t role;
} GroupMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMember_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupMember__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "role",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMember_FieldNumber_Role,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupMember__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMute",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMember_FieldNumber_IsMute,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupMember class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupInfo

@implementation GroupInfo

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic name;
@dynamic maxCount;
@dynamic isMute;
@dynamic membersArray, membersArray_Count;
@dynamic actionTod;
@dynamic actionMute;
@dynamic actionMuteAll;
@dynamic actionDelMsg;
@dynamic actionAssign;

typedef struct GroupInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *membersArray;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t maxCount;
} GroupInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_MaxCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMute",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_IsMute,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupMember),
        .number = GroupInfo_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionTod",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_ActionTod,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionMute",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_ActionMute,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionMuteAll",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_ActionMuteAll,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionDelMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_ActionDelMsg,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionAssign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_ActionAssign,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupInfo class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupEvent

@implementation GroupEvent

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic fromUid;
@dynamic etype;
@dynamic name;
@dynamic maxCount;
@dynamic isMute;
@dynamic membersArray, membersArray_Count;
@dynamic reason;
@dynamic hasTip, tip;
@dynamic actionTod;
@dynamic actionMute;
@dynamic actionMuteAll;
@dynamic actionDelMsg;
@dynamic actionAssign;

typedef struct GroupEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *membersArray;
  NSString *reason;
  GroupTipEvent *tip;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t fromUid;
  int64_t etype;
  int64_t maxCount;
} GroupEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_FromUid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "etype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Etype,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, etype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Name,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_MaxCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMute",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_IsMute,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupMember),
        .number = GroupEvent_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reason",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_Reason,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tip",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupTipEvent),
        .number = GroupEvent_FieldNumber_Tip,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GroupEvent__storage_, tip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionTod",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_ActionTod,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionMute",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_ActionMute,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionMuteAll",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_ActionMuteAll,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionDelMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_ActionDelMsg,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "actionAssign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupEvent_FieldNumber_ActionAssign,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupEvent class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupChatS

@implementation GroupChatS

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic type;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;
@dynamic anonymous;

typedef struct GroupChatS__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t type;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
  int64_t anonymous;
} GroupChatS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Body,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Thumb,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Width,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Height,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Duration,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Lat,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Lng,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Zoom,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "anonymous",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatS_FieldNumber_Anonymous,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GroupChatS__storage_, anonymous),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupChatS class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupChatS__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupChatSR

@implementation GroupChatSR

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic msgId;
@dynamic msgTime;

typedef struct GroupChatSR__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t msgId;
  int64_t msgTime;
} GroupChatSR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatSR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupChatSR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatSR_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupChatSR__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatSR_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupChatSR__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatSR_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupChatSR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatSR_FieldNumber_MsgTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupChatSR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupChatSR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupChatSR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupChatR

@implementation GroupChatR

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic fromUid;
@dynamic msgId;
@dynamic msgTime;
@dynamic type;
@dynamic title;
@dynamic body;
@dynamic thumb;
@dynamic width;
@dynamic height;
@dynamic duration;
@dynamic lat;
@dynamic lng;
@dynamic zoom;
@dynamic anonymous;

typedef struct GroupChatR__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *body;
  NSString *thumb;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t fromUid;
  int64_t msgId;
  int64_t msgTime;
  int64_t type;
  int64_t width;
  int64_t height;
  int64_t duration;
  double lat;
  double lng;
  int64_t zoom;
  int64_t anonymous;
} GroupChatR__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUid",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_FromUid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, fromUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_MsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_MsgTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Title,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Body,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Thumb,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Width,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Height,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Duration,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lat",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Lat,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, lat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Lng,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, lng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Zoom,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "anonymous",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatR_FieldNumber_Anonymous,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GroupChatR__storage_, anonymous),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupChatR class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupChatR__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupChatRBatch

@implementation GroupChatRBatch

@dynamic sign;
@dynamic msgsArray, msgsArray_Count;

typedef struct GroupChatRBatch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
  int64_t sign;
} GroupChatRBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupChatRBatch_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupChatRBatch__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GroupChatR),
        .number = GroupChatRBatch_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupChatRBatch__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupChatRBatch class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupChatRBatch__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetGroupProfiles

@implementation GetGroupProfiles

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic getProfilesArray, getProfilesArray_Count;

typedef struct GetGroupProfiles__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *getProfilesArray;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
} GetGroupProfiles__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetGroupProfiles_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGroupProfiles__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GetGroupProfiles_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetGroupProfiles__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GetGroupProfiles_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetGroupProfiles__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getProfilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GetProfile),
        .number = GetGroupProfiles_FieldNumber_GetProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetGroupProfiles__storage_, getProfilesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGroupProfiles class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGroupProfiles__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupAction

@implementation GroupAction

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic action;
@dynamic uidsArray, uidsArray_Count;
@dynamic duration;
@dynamic tod;
@dynamic reason;
@dynamic msgsArray, msgsArray_Count;

typedef struct GroupAction__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *uidsArray;
  NSString *tod;
  NSString *reason;
  GPBInt64Array *msgsArray;
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t action;
  int64_t duration;
} GroupAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupAction__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupAction__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupAction__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "action",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Action,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uidsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_UidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupAction__storage_, uidsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Duration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupAction__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tod",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Tod,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupAction__storage_, tod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reason",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_Reason,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupAction__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupAction_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupAction__storage_, msgsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupAction class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupRevoke

@implementation GroupRevoke

@dynamic sign;
@dynamic gtype;
@dynamic id_p;
@dynamic msgId;

typedef struct GroupRevoke__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t gtype;
  int64_t id_p;
  int64_t msgId;
} GroupRevoke__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupRevoke_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupRevoke__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gtype",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupRevoke_FieldNumber_Gtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupRevoke__storage_, gtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupRevoke_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupRevoke__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupRevoke_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupRevoke__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupRevoke class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupRevoke__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupTipEvent

@implementation GroupTipEvent

@dynamic event;
@dynamic uidsArray, uidsArray_Count;

typedef struct GroupTipEvent__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *uidsArray;
  int64_t event;
} GroupTipEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "event",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupTipEvent_FieldNumber_Event,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupTipEvent__storage_, event),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uidsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupTipEvent_FieldNumber_UidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupTipEvent__storage_, uidsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupTipEvent class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupTipEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatAction

@implementation ChatAction

@dynamic sign;
@dynamic type;
@dynamic toUid;
@dynamic msgId;
@dynamic uidsArray, uidsArray_Count;
@dynamic msgsArray, msgsArray_Count;
@dynamic data_p;

typedef struct ChatAction__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *uidsArray;
  GPBInt64Array *msgsArray;
  NSString *data_p;
  int64_t sign;
  int64_t type;
  int64_t toUid;
  int64_t msgId;
} ChatAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatAction__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatAction__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_ToUid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatAction__storage_, toUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatAction__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uidsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_UidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatAction__storage_, uidsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatAction__storage_, msgsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ChatAction_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatAction__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatAction class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatAction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileOnline

@implementation ProfileOnline

@dynamic uid;
@dynamic updateTime;
@dynamic nickName;
@dynamic avatar;
@dynamic gender;

typedef struct ProfileOnline__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  int64_t uid;
  int64_t updateTime;
  int64_t gender;
} ProfileOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = ProfileOnline_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ProfileOnline__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileOnline class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProfileOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UsrOnline

@implementation UsrOnline

@dynamic uid;

typedef struct UsrOnline__storage_ {
  uint32_t _has_storage_[1];
  int64_t uid;
} UsrOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = UsrOnline_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UsrOnline__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UsrOnline class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UsrOnline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UsrOffline

@implementation UsrOffline

@dynamic uid;

typedef struct UsrOffline__storage_ {
  uint32_t _has_storage_[1];
  int64_t uid;
} UsrOffline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = UsrOffline_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UsrOffline__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UsrOffline class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UsrOffline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Signup

@implementation Signup

@dynamic sign;
@dynamic appId;
@dynamic phone;
@dynamic nickName;
@dynamic avatar;
@dynamic gender;
@dynamic pic;

typedef struct Signup__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *avatar;
  NSString *pic;
  int64_t sign;
  int64_t appId;
  int64_t phone;
  int64_t gender;
} Signup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Signup__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Signup__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Signup__storage_, phone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Signup__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Signup__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Gender,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Signup__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pic",
        .dataTypeSpecific.clazz = Nil,
        .number = Signup_FieldNumber_Pic,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Signup__storage_, pic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Signup class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Signup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FetchSpark

@implementation FetchSpark

@dynamic sign;

typedef struct FetchSpark__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} FetchSpark__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = FetchSpark_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FetchSpark__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FetchSpark class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FetchSpark__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sparks

@implementation Sparks

@dynamic sign;
@dynamic sparksArray, sparksArray_Count;

typedef struct Sparks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sparksArray;
  int64_t sign;
} Sparks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = Sparks_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sparks__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sparksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Profile),
        .number = Sparks_FieldNumber_SparksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Sparks__storage_, sparksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sparks class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sparks__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetImToken

@implementation GetImToken

@dynamic sign;
@dynamic phone;

typedef struct GetImToken__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
  int64_t phone;
} GetImToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = GetImToken_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetImToken__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.clazz = Nil,
        .number = GetImToken_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetImToken__storage_, phone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetImToken class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetImToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RobotOn

@implementation RobotOn

@dynamic sign;

typedef struct RobotOn__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} RobotOn__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = RobotOn_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RobotOn__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RobotOn class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RobotOn__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RobotOff

@implementation RobotOff

@dynamic sign;

typedef struct RobotOff__storage_ {
  uint32_t _has_storage_[1];
  int64_t sign;
} RobotOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.clazz = Nil,
        .number = RobotOff_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RobotOff__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RobotOff class]
                                     rootClass:[ChatProtobufRoot class]
                                          file:ChatProtobufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RobotOff__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
